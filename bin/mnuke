#!/bin/bash

set -e

. "$(dirname "$0")"/lib/util.sh
. "$(dirname "$0")"/../bashrc

usage() {
  local msg;
  function msg() { eerr "$@"; }
  [[ $# -eq 0 ]] || function msg() { estat "$@"; }
  msg "Usage: mnuke [-t] [-x] [-X] [--tree] [--branch] [--infra] [moz() arguments]"
  msg "  --tree"
  msg "      Also nuke the build tree and its other obj directories"
  msg "  --branch"
  msg "      Also nuke the build-tracking branch in git"
  msg "  --infra"
  msg "      Also nuke unnecessary stuff mb makes like mb-staging"
  msg "  -t"
  msg "      Shorthand for --tree"
  msg "  -x"
  msg "      Shorthand for --tree --infra (all build files)"
  msg "  -X"
  msg "      Shorthand for --tree --infra --branch (everything)"
  [[ $# -eq 0 ]] || exit 0
  exit 1
}

parse_args mnuke 'h?txX' 'help,tree,branch,infra' "$@" || usage

[[ -z $(get_merged_option h ? help) ]] || usage 1
[ $(num_args) -le 2 ] || usage

if [[ $(num_args) -ge 1 ]]; then
  eval args=("$(get_args)")
  moz "${args[@]}"
fi

[ ! -z "$MOZOBJ" ] || die "No moz config"

nukeall="$(get_option X)"
nukefiles="$(get_option x)$nukeall"

nuketree="$(get_option tree)$(get_option t)$nukefiles"
nukeinfra="$(get_option infra)$nukefiles"
nukebranch="$(get_option branch)$nukeall"

ifnuke() {
  if [ -d "$1" ]; then
    estat "Nuking $1"
    if [ -L "$1" ]; then
      ifnuke "$(readlink -f "$1")"
    fi
    cmd rm -rf "$1"
  else
    estat "$1 Doesn't exist, skipping"
  fi
}

cd "$MOZPATH"
ifnuke "$MOZOBJ"

if [[ -n "$nuketree" && -n "$MOZBUILDTREE" && "$MOZBUILDTREE" != "$MOZTREE" ]]; then
  ifnuke "$MOZBUILDTREE"
  eval objdirs=("$(moz_get_suffix_objdirs)")
  for objdir in "${objdirs[@]}"; do
    estat "$objdir"
    cmd ifnuke "$objdir"
  done
fi

if [[ -n "$nukebranch" && -d "$MOZTREE/.git" ]]; then
  estat "Removing branch build/$MOZBUILDTREE"
  (
    cmd cd "$MOZTREE"
    cmd git branch -D "build/$MOZBUILDTREE" || true
  )
fi

[ -z "$nukeinfra" ] || ifnuke "mb-staging"
