#!/bin/bash

# Run given firefox on profile "<dirname firefox>/profile"
# Used for build dirs

set -e

. "$(dirname "$0")"/lib/util.sh
. "$(dirname "$0")"/lib/moz.sh

neph="$(dirname "$(readlink -f "$0")")/.."

parse_args ffbrun 'gd:a:rx' 'profile:,slowscript,use-build-path,moz:' "$@"

# Default FF args
eval args=("$(get_args)")
profile="$(get_option profile)"
[ -n "$profile" ] || profile="./profile"

ffargs=(-no-remote -profile "$profile" "${args[@]}")

# Default moz env vars
[ -n "$(get_option slowscript)" ] || export JS_DISABLE_SLOW_SCRIPT_SIGNALS=1
[ ! -z "$XPCOM_MEM_LEAK_LOG" ] || export XPCOM_MEM_LEAK_LOG=1
# see also IPCPlugins:5 (VERY spammy)
[ ! -z "$NSPR_LOG_MODULES" ] || export NSPR_LOG_MODULES="objlc:5,Plugin:5,PluginNPP:5,PluginNPN:5"
[ ! -z "$ASAN_OPTIONS"] || export ASAN_OPTIONS="abort_on_error=1"

# Set debugger from args
dbgargs=($(get_option a))
debugger="$(get_option d)"
debugger_use_build_path="$(get_option use-build-path)"
[ -z "$debugger$(get_option g)" ] || dbg=1
[ ! -z "$debugger" ] || debugger="gdb"
[ -z "$(get_option r)" ] || dbgargs=("${dbgargs[@]}" -ex run)

# Don't cause non-gdb spew if running gdb in emacs
if [ "$EMACS" = "t" ] && [ -n "$dbg" ]; then
    cmd() { "$@"; }
    estat() { :; }
fi

# pass --moz foo to moz setup script
moz="$(get_option moz)"
[ -z "$moz" ] || cmd moz $moz

# Sanity checks Don't rm -rf custom profile paths, especially since they can be
# relative and could lead to painful accidents
[ -z "$(get_option x)" ] || [ -z "$profile" ] || die "-x and --profile don't mix"

# Chcek for mozconfig
[ ! -z "$MOZOBJ" ] || die "No moz config"
if [ ! -x "$MOZPATH/$MOZOBJ/dist/bin/firefox" ]; then
  die "Not built :("
fi

cd "$MOZPATH/$MOZOBJ/dist/bin/"

# Nuke profile with -x
[ -z "$(get_option x)" ] || rm -rf "$profile"

# Make profile if necessary
if [[ ! -d "$profile" ]]; then
  estat "Making fresh profile"
  cmd mkdir -p "$profile"/plugins
fi

# Copy plugins into profile
if [[ -d ../plugins ]]; then
    [ -d "$profile"/plugins ] || cmd mkdir "$profile"/plugins
    cmd cp ../plugins/*.so "$profile"/plugins
fi

gdb_quote() {
  # Replace backslashes and single quotes. Probably not comprehensive.
  local foo="$1"
  foo="${foo//\\/\\\\}"
  foo="${foo//\'/\\\'}"
  echo "'$foo'"
}

# If debugging, swap build tree paths to source tree paths unless
# --use-build-path is set
if [[ -n "$dbg" && -z "$debugger_use_build_path" ]]; then
    dbgargs=("${dbgargs[@]}" -ex "set substitute-path $(gdb_quote "$MOZPATH/$MOZBUILDTREE/") $(gdb_quote "$MOZPATH/$MOZTREE/")")
fi

if [ -n "$dbg" ]; then
  [ -z "$EMACS" ] || dbgargs[${#dbgargs[@]}]="-i=mi"
  cmd cleangtk $debugger "${dbgargs[@]}" --args ./firefox "${ffargs[@]}"
else
  cmd cleangtk ./firefox "${ffargs[@]}"
fi
