#!/bin/bash

set -e
cd "$MOZPATH"

source ~/.bashrc

die() {
  echo >&2 '!!'" $1"
  exit 1
}

while [ $# -gt 0 ]; do
  arg="$1"
  shift
  case "$arg" in
    '--nomach') # Don't use mach
      nomach=1
    ;;
    '--clobber') # Nuke config in objdir to ensure a full rebuild
      clobber=1
      configure=1
    ;;
    '--nuke') # Delete objdir first
      nuke=1
      configure=1
    ;;
    '-f') # Explicitly reconfigure tree
      configure=1
    ;;
    '-v')
      verbose=1
    ;;
    '-p') # make package when finished
      package=1
    ;;
    '--cpufreq') # Jump to performance cpufreq
      cpufreq=1
    ;;
    *)
      die "Unexpected argument: $arg"
    ;;
  esac
done

#
# Defaults & Sanity
#
if [ -z "$MOZCFG" ] || [ -z "$MOZTREE" ] || [ -z "$MOZCONFIG" ] || \
    [ ! -d "$MOZTREE" ] || [ ! -f "$MOZCONFIG" ]; then
    die "moz environment is not properly configured :("
fi

#
# Make environment
#

export PYTHON=python2

MAKE="make -j10"
[ -z "$verbose" ] && MAKE="$MAKE --silent"

if [ ! -z "$cpufreq" ]; then
    echo ":: Boosting cpufreq"
    trap "cpufreq-selector -c all -g ondemand" EXIT
    cpufreq-selector -c all -g performance
fi

#
# Nuke/clobber
#

if [ -d "$MOZCFG" ] && [ ! -z "$clobber" ]; then
  # This forces a full reconfigure and will ruin any hope of a partial build,
  # even through ccache. The nuking-makefiles is necessary for when the build
  # tree has changed, just reconfiguring wont fix some makefiles sometimes due
  # to our odd makefile hacks
  rm -f "$MOZCFG"/config.*
  find "$MOZCFG" -name Makefile -delete
fi

if [ -d "$MOZCFG" ] && [ ! -z "$nuke" ]; then
  dir="$(readlink -f "$MOZCFG")"
  echo ":: Press enter to run 'rm -r $dir', or control-C"
  read
  rm -r "$dir"
fi

#
# Find build tree and check for builds against the wrong tree
#

if [ -f "$MOZCFG/Makefile" ]; then
  configured_tree="$(egrep '^topsrcdir' "$MOZCFG/Makefile" | awk '{ print $NF }')"
  if [ "$(readlink -f "$configured_tree")" != "$(readlink -f "$MOZTREE")" ]; then
    die "Build directory is configured against the wrong tree, use --clobber or --nuke"
  fi
fi

#
# Maybe configure tree
#

[ -f "$MOZTREE/client.mk" ] || die "Tree \"$MOZTREE\" doesn't have a client.mk..."

if [ ! -f /sys/fs/cgroup/cpu/tasks ]; then
    echo >&2 "!! No cgroup"
    sleep 2
else
    lpcg
fi

if [ ! -z "$configure" ]; then
  echo ":: Reconfiguring build"
  (
    cd "$MOZTREE"
    $MAKE -f client.mk configure
  )
fi

(
  cd "$MOZTREE"
  if [ -f ./mach ] && [ -z "$nomach" ]; then
      echo ":: Building with mach"
      py2e ./mach build
  else
      echo ":: Not using mach"
      $MAKE -f client.mk && echo ":: Make succeeded"
  fi
)

[ -z "$package" ] || ( cd "$MOZCFG" && $MAKE package && $MAKE package-tests && echo ":: Package succeeded" )

dcg
