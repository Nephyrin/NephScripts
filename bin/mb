#!/bin/bash

set -e
cd "$MOZPATH"

source ~/.bashrc

die() {
  echo >&2 '!!'" $1"
  exit 1
}

parseopts() {
    while [ $# -gt 0 ]; do
        arg="$1"
        shift
        case "$arg" in
            '--no-mach') # Don't use mach
                nomach=1
                ;;
            '--no-cgroup') # Don't use cgroup hooks
                nocgroup=1
                ;;
            '--no-distcc') # Don't use distcc
                nodistcc=1
                ;;
            '--only-distcc') # Don't use local cpus
                onlydistcc=1
                ;;
            '--clobber') # Try to make clobber the objdir
                clobber=1
                ;;
            '--nuke') # Delete objdir first
                nuke=1
                ;;
            '-f') # Explicitly reconfigure tree
                configure=1
                ;;
            '-v')
                verbose=1
                ;;
            '-p') # make package when finished
                package=1
                ;;
            '--cpufreq') # Jump to performance cpufreq
                cpufreq=1
                ;;
            '--')
                ;;
            *)
                die "Unexpected argument: $arg"
                ;;
        esac
    done
}
eval parseopts "$(getopt -n mb -l no-mach,no-cgroup,no-distcc,clobber,nuke,cpufreq -o fvp -- "$@")"

#
# Defaults & Sanity
#

if [ ! -z "$nodistcc" ] && [ ! -z "$onlydistcc" ]; then
    die "--no-distcc and --only-distcc are mutually exclusive"
fi

if [ -z "$MOZCFG" ] || [ -z "$MOZTREE" ] || [ -z "$MOZCONFIG" ] || \
    [ ! -d "$MOZTREE" ] || [ ! -f "$MOZCONFIG" ]; then
    die "moz environment is not properly configured :("
fi

if [ ! -f "$MOZTREE/mach" ] && [ -z "$nomach" ]; then
    die "This tree has no mach, but --no-mach was not specified"
fi

[ -f "$MOZTREE/client.mk" ] || die "Tree \"$MOZTREE\" doesn't have a client.mk..."

#
# Make environment
#

# We handle clobbering when desired, so disable mach/client.mk's autoclobber
export NO_AUTOCLOBBER=1

MACH="py2e ./mach"
MAKE="py2e make -j10"
[ -z "$verbose" ] && MAKE="$MAKE --silent"

#
# Setup cpufreq and cgroup
#

trap=""
if [ ! -z "$cpufreq" ]; then
    echo ":: Boosting cpufreq"
    trap="cpufreq-selector -c all -g ondemand"
    cpufreq-selector -c all -g performance
fi

if [ -z "$nocgroup" ]; then
    if [ ! -f /sys/fs/cgroup/cpu/tasks ]; then
        echo >&2 "!! No cgroup"
        sleep 2
    else
        lpcg
        [ -z "$trap" ] || trap="$trap; "
        trap="${trap}dcg"
    fi
fi

[ -z "$trap" ] || trap "$trap" EXIT

#
# DistCC?
#

if [ -z "$nodistcc" ]; then
    #MACH="pump $MACH"
    #MAKE="pump $MAKE"
    # FIXME Figure out how we want this to work...
    # FIXME DISTCC_POTENTIAL_HOSTS if we're using pump
    DISTCC_HOSTS="--randomize bangles.mv.mozilla.com/16,lzo gandalf.mv.mozilla.com/16,lzo"
    if [ -z "$onlydistcc" ]; then
        DISTCC_HOSTS="$DISTCC_HOSTS --localslots=4 --localslots_cpp=16"
    else
        # We have to do some processing locally, limit it heavily
        # (this is used when on battery and such)
        DISTCC_HOSTS="$DISTCC_HOSTS --localslots_cpp=4"
    fi
    export DISTCC_HOSTS
    export DISTCC_PAUSE_TIME_MSEC=10
    export DISTCC_BACKOFF_PERIOD=0
    export DISTCC_FALLBACK=1
    export DISTCC_SKIP_LOCAL_RETRY=1
    export MAKE_JOBS=$(distcc -j)
    echo ":: distcc configured with $MAKE_JOBS jobs"
fi


#
# Nuke or clobber if requested
#

if [ -d "$MOZCFG" ] && [ ! -z "$nuke" ]; then
  dir="$(readlink -f "$MOZCFG")"
  echo ":: Nuke requested. Press enter to run 'rm -r $dir', or control-C to abort"
  read
  rm -r "$dir"
elif [ ! -z "$clobber" ]; then
      echo ":: Clobbering build"
      # Force a full clobber build while preserving some intermediary files
      (
          cd "$MOZCFG"
          rm -rf conf* CLOBBER
          find . -name 'Makefile*' -exec rm -v {} \;
      )
fi

#
# If configured at this point, check that it is against the right tree
#

if [ -f "$MOZCFG/Makefile" ]; then
  configured_tree="$(egrep '^topsrcdir' "$MOZCFG/Makefile" | awk '{ print $NF }')"
  if [ "$(readlink -f "$configured_tree")" != "$(readlink -f "$MOZTREE")" ]; then
    die "Build directory is configured against the wrong tree, use --clobber or --nuke"
  fi
fi

#
# Explicit configure if requested
#

if [ ! -z "$configure" ]; then
    if [ -z "$nomach" ]; then
        echo ":: -f specified, nuking config.status to force reconfigure"
        rm -vf "$MOZCFG"/config.status
    else
        echo ":: Not using mach, explicitly reconfiguring tree (-f)"
        (
            cd "$MOZTREE"
            $MAKE -f client.mk configure
        )
    fi
fi

#
# Do the build
#
(
  cd "$MOZTREE"
  if [ -z "$nomach" ]; then
      echo ":: Building with mach"
      $MACH build
  else
      echo >&2 "!! Not using mach"
      sleep 2
      $MAKE -f client.mk && echo ":: Make succeeded"
  fi
)

[ -z "$package" ] || ( cd "$MOZCFG" && $MAKE package && $MAKE package-tests && echo ":: Package succeeded" )
