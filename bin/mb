#!/bin/bash

set -e
cd ~/moz

source ~/.bashrc

die() {
  echo >&2 '!!'" $1"
  exit 1
}

while [ $# -gt 0 ]; do
  arg="$1"
  shift
  case "$arg" in
    '--clobber') # Nuke config in objdir to ensure a full rebuild
      clobber=1
      configure=1
    ;;
    '--nuke') # Delete objdir first
      nuke=1
      configure=1
    ;;
    '-t') # Use this tree instead of whatever's configured
      tree="$1"
      shift
    ;;
    '-f') # Explicitly reconfigure tree
      configure=1
    ;;
    '-p') # make package when finished
      package=1
    ;;
    *)
      if [ -z "$cfg" ]; then
        cfg="$arg"
      else
        echo >&2 "!! Unexpected argument: $arg"
        exit 1
      fi
    ;;
  esac
done

#
# Defaults & Sanity
#
[ -d "$cfg" ] || configure=1

if [ -z "$cfg" ] || [ ! -f "m-${cfg}.mzc" ]; then
  die "No config for '$cfg'"
fi

#
# Make environment
#

export PYTHON=python2
export MOZCONFIG="$PWD/m-${cfg}.mzc"

MAKE="eval lowprio make -j10"

trap "cpufreq-selector -c all -g ondemand" EXIT
cpufreq-selector -c all -g performance

#
# Nuke/clobber
#
if [ -d "$cfg" ] && [ ! -z "$clobber" ]; then
  # This forces a full reconfigure and will ruin any hope of a partial build,
  # even through ccache. The nuking-makefiles is necessary for when the build
  # tree has changed, just reconfiguring wont fix some makefiles sometimes due
  # to our odd makefile hacks
  rm "$cfg"/config.*
  find "$cfg" -name Makefile -delete
fi
if [ -d "$cfg" ] && [ ! -z "$nuke" ]; then
  dir="$(readlink -f "$cfg")"
  echo ":: Press enter to run 'rm -r $dir', or control-C"
  read
  rm -r "$dir"
fi

#
# Find build tree and check for builds against the wrong tree
#
if [ -f "$cfg/Makefile" ]; then
  configured_tree="$(egrep '^topsrcdir' "$cfg/Makefile" | awk '{ print $NF }')"
  if [ ! -z "$tree" ] && [ "$(readlink -f "$configured_tree")" != "$(readlink -f "$tree")" ]; then
    die "Build directory is configured against the wrong tree, use --clobber or --nuke"
  fi
  tree="$configured_tree"
fi

#
# Maybe configure tree
#

[ ! -z "$tree" ] || die "No tree specified and build objdir isn't configured"
[ -f "$tree/client.mk" ] || die "Tree \"$tree\" doesn't look buildable to me"

if [ -z "$configure" ]; then
  [ -f "$cfg/Makefile" ] || die "Build directory is not configured properly (no Makefile), use -f to force configure (or --nuke or --clobber)"
else
  echo ":: Reconfiguring build"
  (
    cd "$tree"
    $MAKE -f client.mk configure
  )
fi

if [ "${cfg%%-*}" = "ff" ]; then
  # Work around bug 717947
  (
    cd "$cfg"
    for x in {js/src/,}config; do
      $MAKE -C $x DIRS+=mkdepend mkdepend/Makefile
    done
  )
fi

(
  cd "$tree"
  $MAKE -f client.mk && echo ":: Make succeeded"
)

[ -z "$package" ] || ( cd "$cfg" && $MAKE package && echo ":: Package succeeded" )
