#!/bin/bash

set -e

nephbin="$(dirname "$(readlink -f "$0")")"
. "$nephbin"/lib/util.sh
. ~/.bashrc

cd "$MOZPATH"

args=()
parseopts() {
    while [ $# -gt 0 ]; do
        arg="$1"
        shift
        case "$arg" in
            '--no-mach') # Don't use mach
                nomach=1
                ;;
            '--no-cgroup') # Don't use cgroup hooks
                nocgroup=1
                ;;
            '--no-distcc') # Don't use distcc
                nodistcc=1
                ;;
            '--no-buildtree') # Build against current tree, without build-tree
                nobuildtree=1 # magic
                ;;
            '-b') # Only sync buildtree, don't build anything
                onlysyncbuild=1
                ;;
            '--only-distcc') # Don't use local cpus
                onlydistcc=1
                ;;
            '--clobber') # Try to make clobber the objdir
                clobber=1
                ;;
            '--nuke') # Delete objdir first
                nuke=1
                ;;
            '--branch')
                explicitbranch="$1"
                shift
                ;;
            '-c') # Explicitly reconfigure tree
                configure=1
                ;;
            '-f') # Override clobber check
                force=1
                ;;
            '-j') # Make jobs
                makejobs="$1"
                shift
                ;;
            '-v')
                verbose=1
                ;;
            '-p') # make package when finished
                package=1
                ;;
            '--cpufreq') # Jump to performance cpufreq
                cpufreq=1
                ;;
            '--')
                args=("${args[@]}" "$@")
                break
                ;;
            *)
                [ "${arg#-}" = "$arg" ] || die "Unexpected argument: $arg"
                args[${#args[@]}]="$arg"
                ;;
        esac
    done
}
parsed="$(getopt -n mb -l no-mach,no-cgroup,no-distcc,no-buildtree,only-distcc,clobber,nuke,cpufreq,branch: -o j:bcfvp -- "$@")"
eval parseopts $parsed

#
# Defaults & Sanity
#

if [ ! -z "$nodistcc" ] && [ ! -z "$onlydistcc" ]; then
    die "--no-distcc and --only-distcc are mutually exclusive"
fi

if [ -z "$MOZOBJ" ] || [ -z "$MOZTREE" ] || [ -z "$MOZCONFIG" ] || \
    [ ! -d "$MOZTREE" ] || [ ! -f "$MOZCONFIG" ]; then
    die "moz environment is not properly configured :("
fi

if [ ! -f "$MOZTREE/mach" ] && [ -z "$nomach" ]; then
    die "This tree has no mach, but --no-mach was not specified"
fi

[ -f "$MOZTREE/client.mk" ] || die "Tree \"$MOZTREE\" doesn't have a client.mk..."

#
# Handle --no-buildtree
#

if [ ! -z "$nobuildtree" ]; then
  MOZBUILDTREE="$MOZTREE"
fi

#
# Make environment
#

# We handle clobbering when desired, so disable mach/client.mk's autoclobber
export NO_AUTOCLOBBER=1

MACH="py2e ./mach"
MAKE="py2e make -j10"
[ -z "$verbose" ] && MAKE="$MAKE --silent"

#
# Setup cpufreq and cgroup
#

trap=""
if [ ! -z "$cpufreq" ]; then
    estat "Boosting cpufreq"
    trap="cpufreq-selector -c all -g ondemand"
    cpufreq-selector -c all -g performance
fi

if [ -z "$nocgroup" ]; then
    if [ ! -f /sys/fs/cgroup/cpu/tasks ]; then
        ewarn "No cgroup"
        sleep 2
    else
        lpcg
        [ -z "$trap" ] || trap="$trap; "
        trap="${trap}dcg"
    fi
fi

[ -z "$trap" ] || trap "$trap" EXIT

#
# DistCC?
#

if [ -z "$nodistcc" ]; then
    MACH="pump $MACH"
    MAKE="pump $MAKE"
    if [ -f "$nephbin/../priv/distcc.conf" ]; then
      [ -z "$onlydistcc" ] || export NEPH_DISTCC_NOLOCAL=1
      estat "Found distcc.conf"
      source "$nephbin/../priv/distcc.conf"
    fi
    if [ -z "${DISTCC_HOSTS}${DISTCC_POTENTIAL_HOSTS}" ]; then
      eerr "No DISTCC_HOSTS or DISTCC_POTENTIAL_HOSTS"
      die  "Set these or use --no-distcc"
    fi
    export MAKE_JOBS=$(( $(distcc -j) * 2 ))
    estat "distcc configured with $MAKE_JOBS jobs: "$DISTCC_HOSTS
fi

[ -z "$makejobs" ] || export MAKE_JOBS="$makejobs"

#
# Nuke or clobber if requested
#

if [ -d "$MOZOBJ" ] && [ ! -z "$nuke" ]; then
  dir="$(readlink -f "$MOZOBJ")"
  estat "Nuking build directory"
  rm -r "$dir"
elif [ ! -z "$clobber" ]; then
      estat "Clobbering build"
      # Force a full clobber build while preserving some intermediary files
      (
          cd "$MOZOBJ"
          rm -rf conf* CLOBBER
          find . -name 'Makefile*' -exec rm -v {} \;
      )
elif [ -d "$MOZOBJ" ] && [ ! -z "$force" ]; then
    estat "Overriding clobber"
    touch "$MOZOBJ"/CLOBBER
fi

#
# If configured at this point, check that it is against the right tree
#

if [ -f "$MOZOBJ/Makefile" ]; then
  configured_tree="$(egrep '^topsrcdir' "$MOZOBJ/Makefile" | awk '{ print $NF }')"
  configured_tree="$(readlink -f "$configured_tree")"
  expected_tree="$(readlink -f "$MOZBUILDTREE")"
  if [ "$configured_tree" != "$expected_tree" ]; then
    die "Build directory is configured against the wrong tree, use --clobber or --nuke"
  fi
fi

#
# Setup build tree if needed
#

if [ "$MOZBUILDTREE" != "$MOZTREE" ]; then
  branch="build/$MOZTREE"
  [ -z "$MOZSUFFIX" ] || branch="$branch-$MOZSUFFIX"
  ref="$(cd "$MOZTREE" && git rev-parse HEAD)"
  # Make sure build branch exists
  if [ ! -d "$MOZBUILDTREE" ]; then
    estat "Creating new $MOZBUILDTREE"
    _co=HEAD
    [ -z "$explicitbranch" ] || _co="$explicitbranch"
    ( cd "$MOZTREE" && cmd git branch -f "$branch" "$_co" )
    /usr/share/git/workdir/git-new-workdir "$MOZTREE" "$MOZBUILDTREE" "$branch"
  fi
  (
    cd "$MOZTREE"
    if [ -z "$explicitbranch" ]; then
      untracked=()
      while IFS="" read -r file; do
        untracked[${#untracked[@]}]="$file";
      done < <(git ls-files -o --exclude-standard)
      for file in "${untracked[@]}"; do
        cmd git add "$file" >/dev/null
      done
      cmd git diff "$branch" --binary
      for file in "${untracked[@]}"; do
        cmd git reset HEAD -- "$file" >/dev/null
      done
    else
      cmd git diff "$branch" "$explicitbranch" --binary
    fi
  ) | (
    estat "Checking out build tree"
    cd "$MOZBUILDTREE"
    if [ "$(git rev-parse --abbrev-ref HEAD)" != "$branch" ] || \
       [ ! -z "$(git status -s)" ]; then
      die git build tree "$MOZBUILDTREE" is dirty. Why is it dirty?
    fi
    if read -r firstline; then
      ( echo "$firstline" && cat - ) | cmd git apply --whitespace=nowarn -
    fi
    if [ -z "$explicitbranch" ]; then
      cmd git reset "$ref"
      cmd git add -A
      cmd git commit --allow-empty -m "NEPH - Build Commit @ $(date)"
    else
      cmd git reset "$explicitbranch"
    fi
  )
fi

[ -z "$onlysyncbuild" ] || exit 0

#
# Explicit configure if requested
#

if [ ! -z "$configure" ]; then
    if [ -z "$nomach" ]; then
        estat "-f specified, nuking config.status to force reconfigure"
        cmd rm -vf "$MOZOBJ"/config.status
    else
        estat "Not using mach, explicitly reconfiguring tree (-f)"
        (
            cd "$MOZBUILDTREE"
            cmd $MAKE -f client.mk configure
        )
    fi
fi

#
# Do the build
#
(
  cd "$MOZBUILDTREE"
  if [ -z "$nomach" ]; then
      estat "Building with mach"
      cmd $MACH build "${args[@]}"
  else
      ewarn "Not using mach"
      [ "${#args[@]}" -eq 0 ] || die "Building directories not supported w/o mach"
      cmd sleep 2
      cmd $MAKE -f client.mk && estat "Make succeeded"
  fi
)

if [ ! -z "$package" ]; then
    cd "$MOZOBJ"
    cmd $MAKE package
    cmd $MAKE package-tests
    estat "Package succeeded"
fi
